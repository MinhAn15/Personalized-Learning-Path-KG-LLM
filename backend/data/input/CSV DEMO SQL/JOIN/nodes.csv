"Document_ID","Node_ID","Node_Label","Sanitized_Concept","Context","Definition","Example","Learning_Objective","Skill_Level","Time_Estimate","Difficulty","Priority","Prerequisites","Semantic_Tags","Focused_Semantic_Tags","Key_Property_1","Value_1","Key_Property_2","Value_2","Key_Property_3","Value_3","Key_Property_4","Value_4","Key_Property_5","Value_5"
"doc1","concept:joins","Concept","joins","sql","Joins are used to combine rows from two or more tables based on a related column.","SELECT * FROM Employees AS e JOIN Departments AS d ON e.DepartmentID = d.DepartmentID","Understand the purpose and types of joins in SQL.","Apply","30","STANDARD","5","concept:select_statement","cartesian_product;cross_join;data_retrieval;database;equijoin;full_join;inner_join;join_conditions;joins;left_join;multiple_tables;natural_join;outer_join;query_optimization;relational_algebra;right_join;self_join;sql;table_combination;three_way_join","joins;sql;database;table_combination","Learning_Style_Preference","visual","Learning_Tips","Always specify join conditions to avoid Cartesian products.","Real_World_Application","Retrieving customer orders with product details from multiple tables.","Common_Errors","Omitting join conditions leading to Cartesian products.","Instruction_Content_Template","Learn joins by writing SQL queries to combine data from multiple tables, e.g., SELECT * FROM table1 JOIN table2 ON condition."
"doc1","concept:inner_join","Concept","inner_join","sql","A join that returns only rows where there is a match in both tables.","SELECT * FROM Employees AS e INNER JOIN Departments AS d ON e.DepartmentID = d.DepartmentID","Use inner joins to retrieve matching rows from multiple tables.","Apply","15","STANDARD","4","concept:joins","data_integration;database;database_query;equijoin;inner_join;join_conditions;join_types;matching_rows;on_clause;primary_key;query_performance;relational_database;select_statement;sql;sql_syntax;table_relationships;table_selection;where_clause;data_manipulation;foreign_key","inner_join;sql;database;matching_rows","Learning_Style_Preference","visual","Real_World_Application","Retrieving employee names with department names.","Common_Errors","Misunderstanding match conditions.","Instruction_Content_Template","Learn inner_join by writing SQL queries to match rows, e.g., SELECT * FROM table1 INNER JOIN table2 ON condition.","Source_Section","INNER Join"
"doc1","concept:left_outer_join","Concept","left_outer_join","sql","A join that returns all rows from the left table and matched rows from the right table, with NULLs for unmatched rows.","SELECT * FROM Employees AS e LEFT OUTER JOIN Departments AS d ON e.DepartmentID = d.DepartmentID","Use left outer joins to include all left table rows in SQL queries.","Apply","15","STANDARD","4","concept:joins","data_integration;database;database_query;join_conditions;join_types;left_join;left_outer_join;null_values;on_clause;outer_join;query_performance;relational_database;select_statement;sql;sql_syntax;table_relationships;table_selection;unmatched_rows;data_manipulation;foreign_key","left_outer_join;sql;database;null_values","Learning_Style_Preference","visual","Real_World_Application","Listing all employees with their departments, including those without departments.","Common_Errors","Misinterpreting NULL returns.","Instruction_Content_Template","Learn left_outer_join by writing SQL queries to include all left table rows, e.g., SELECT * FROM table1 LEFT OUTER JOIN table2 ON condition.","Source_Section","LEFT OUTER Join"
"doc1","concept:right_outer_join","Concept","right_outer_join","sql","A join that returns all rows from the right table and matched rows from the left table, with NULLs for unmatched rows.","SELECT * FROM Employees AS e RIGHT OUTER JOIN Departments AS d ON e.DepartmentID = d.DepartmentID","Use right outer joins to include all right table rows in SQL queries.","Apply","15","STANDARD","4","concept:joins","data_integration;database;database_query;join_conditions;join_types;null_values;on_clause;outer_join;query_performance;relational_database;right_join;right_outer_join;select_statement;sql;sql_syntax;table_relationships;table_selection;unmatched_rows;data_manipulation;foreign_key","right_outer_join;sql;database;null_values","Learning_Style_Preference","visual","Real_World_Application","Listing all departments with their employees, including departments without employees.","Common_Errors","Misinterpreting NULL returns.","Instruction_Content_Template","Learn right_outer_join by writing SQL queries to include all right table rows, e.g., SELECT * FROM table1 RIGHT OUTER JOIN table2 ON condition.","Source_Section","RIGHT OUTER Join"
"doc1","concept:full_outer_join","Concept","full_outer_join","sql","A join that returns all rows when there is a match in one of the tables, with NULLs for unmatched rows.","SELECT * FROM Employees AS e FULL JOIN Departments AS d ON e.DepartmentID = d.DepartmentID","Use full outer joins to retrieve all rows from both tables in SQL queries.","Apply","15","STANDARD","4","concept:joins","data_integration;database;database_query;full_join;full_outer_join;join_conditions;join_types;null_values;on_clause;outer_join;query_performance;relational_database;select_statement;sql;sql_syntax;table_relationships;table_selection;unmatched_rows;data_manipulation;foreign_key","full_outer_join;sql;database;null_values","Learning_Style_Preference","visual","Real_World_Application","Combining all employees and departments, including unmatched entries.","Common_Errors","Misinterpreting combined NULL results.","Instruction_Content_Template","Learn full_outer_join by writing SQL queries to include all rows, e.g., SELECT * FROM table1 FULL JOIN table2 ON condition.","Source_Section","FULL OUTER Join"
"doc1","concept:cross_join","Concept","cross_join","sql","A join that returns the Cartesian product of the two tables.","SELECT * FROM Employees AS e CROSS JOIN Departments AS d","Use cross joins to generate all possible combinations of rows in SQL queries.","Apply","15","STANDARD","3","concept:joins","cartesian_product;cross_join;data_combinations;database;database_query;join_types;no_conditions;query_performance;relational_database;select_statement;sql;sql_syntax;table_combinations;table_multiplication;table_relationships;table_selection;unfiltered_join;data_manipulation;foreign_key;primary_key","cross_join;sql;database;cartesian_product","Learning_Style_Preference","visual","Real_World_Application","Generating all possible employee-department pairs.","Common_Errors","Unintentionally creating large result sets.","Instruction_Content_Template","Learn cross_join by writing SQL queries to combine all rows, e.g., SELECT * FROM table1 CROSS JOIN table2.","Source_Section","CROSS Join"
"doc1","concept:subqueries","Concept","subqueries","sql","A query nested within another SQL query, used to filter data.","SELECT * FROM Employees WHERE DepartmentID IN (SELECT DepartmentID FROM Departments WHERE Name = 'Finance')","Use subqueries to filter data based on conditions from another query.","Apply","20","STANDARD","4","concept:select_statement","correlated_subquery;data_filtering;data_retrieval;database;database_query;in_operator;nested_queries;non_correlated_subquery;query_composition;query_performance;relational_database;select_statement;sql;sql_optimization;sql_syntax;subqueries;table_selection;where_clause;data_analysis;data_manipulation","subqueries;sql;database;nested_queries","Learning_Style_Preference","reading_writing","Real_World_Application","Finding employees in specific departments.","Common_Errors","Misusing operators with subqueries.","Instruction_Content_Template","Learn subqueries by writing nested SQL queries, e.g., SELECT * FROM table WHERE column IN (SELECT ...).","Source_Section","SUBQUERIES"
"doc1","concept:cte","Concept","cte","sql","Named subqueries that can be reused in a query for better readability.","WITH Employees_CTE AS (SELECT * FROM Employees) SELECT * FROM Employees_CTE","Use Common Table Expressions to simplify complex queries.","Apply","15","STANDARD","3","concept:subqueries","common_table_expressions;cte;data_retrieval;database;database_query;named_subqueries;non_recursive_cte;query_performance;query_readability;recursive_cte;relational_database;select_statement;sql;sql_optimization;sql_syntax;subqueries;table_selection;with_clause;data_analysis;data_manipulation","cte;sql;database;subqueries","Learning_Style_Preference","reading_writing","Real_World_Application","Simplifying reports with repeated subqueries.","Common_Errors","Incorrectly defining CTE scope.","Instruction_Content_Template","Learn cte by writing named subqueries, e.g., WITH cte_name AS (SELECT ...) SELECT * FROM cte_name.","Source_Section","COMMON TABLE EXPRESSIONS"
"doc1","concept:indices","Concept","indices","sql","Database structures that speed up searching for values in columns.","CREATE NONCLUSTERED INDEX IX_Employees_FirstName_LastName ON Employees(FirstName, LastName)","Understand how indices improve query performance.","Understand","20","STANDARD","3","concept:select_statement","b_tree;clustered_index;data_access;data_retrieval;database;database_administration;database_design;index_creation;index_usage;indices;non_clustered_index;performance_tuning;query_execution_plan;query_performance;relational_database;search_optimization;select_statement;sql;sql_optimization;table_selection","indices;sql;database;query_performance","Learning_Style_Preference","visual","Real_World_Application","Speeding up employee searches by name.","Common_Errors","Over-indexing slowing updates.","Instruction_Content_Template","Learn indices by creating structures to optimize searches, e.g., CREATE INDEX on table(column).","Source_Section","Indices"